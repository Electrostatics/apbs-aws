---
# DAP provisioning
  - name: Create input S3 bucket
    amazon.aws.s3_bucket:
      profile: "{{ aws_profile }}"
      region: "{{ aws_region }}"
      name: "{{ project }}-{{ deployment_group }}-input"
      state: present
      delete_public_access: yes
      tags:
         Deployment: "{{ deployment_group }}"
    register: s3_input
    tags: s3

  - name: Debug s3
    debug: var=s3_input
    tags: s3
  
  - name: Add s3 CORS
    aws_s3_cors:
      profile: "{{ aws_profile }}"
      region: "{{ aws_region }}"
      name: "{{ project }}-{{ deployment_group }}-input"
      state: present
      rules:
        - allowed_origins:
            - '*'
          allowed_methods:
            - PUT
            - POST
          allowed_headers:
            - '*'
          expose_headers: 
            - Content-Length
          max_age_seconds: 3000
    tags: 
      - s3
      - cors
      
  - name: Create output S3 bucket
    amazon.aws.s3_bucket:
      profile: "{{ aws_profile }}"
      region: "{{ aws_region }}"
      name: "{{ project }}-{{ deployment_group }}-output"
      state: present
      policy: "{{ lookup('template','files/s3-policy-output.json.j2') }}"
      tags:
         Deployment: "{{ deployment_group }}"
    register: s3_output
    tags: s3

  - name: Debug s3
    debug: var=s3_output
    tags: s3
  
  - name: Add s3 CORS
    aws_s3_cors:
      profile: "{{ aws_profile }}"
      region: "{{ aws_region }}"
      name: "{{ project }}-{{ deployment_group }}-output"
      state: present
      rules:
        - allowed_origins:
            - '*'
          allowed_methods:
            - HEAD
            - GET
          allowed_headers:
            - '*'
          expose_headers: 
            - Content-Length
          max_age_seconds: 3000
    tags: 
      - s3
      - cors

  - name: Create IAM role for fargate 
    iam_role: 
      profile: "{{ aws_profile }}"
      region: "{{ aws_region }}"
      name: "{{ project }}-{{ deployment_group }}-fargate-role"
      description: Role for "{{ project }}-{{ deployment_group }}-fargate-role"
      assume_role_policy_document: "{{ lookup('file', 'iam-policy-ecs-task.json') }}"
      managed_policy: 
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
    register: iam_role_fargate
    tags: iam
    
  - name: Create IAM role for fargate apbs instance
    iam_role: 
      profile: "{{ aws_profile }}"
      region: "{{ aws_region }}"
      name: "{{ project }}-{{ deployment_group }}-apbs-role"
      description: Role for "{{ project }}-{{ deployment_group }}-apbs-role"
      assume_role_policy_document: "{{ lookup('file', 'iam-policy-ecs-task.json') }}"
    register: iam_role_apbs
    tags: iam

  - name: Update apbs IAM role
    iam_policy:
      profile: "{{ aws_profile }}"
      iam_type: role
      iam_name: "{{ project }}-{{ deployment_group }}-apbs-role"
      policy_name: "{{ project }}-{{ deployment_group }}-apbs-policy"
      state: present
      policy_json: "{{ lookup('template','files/iam-policy-apbs-role.json.j2') }}"
    tags: iam

  - name: Create SQS queue
    sqs_queue:
      profile: "{{ aws_profile }}"
      region: "{{ aws_region }}"
      name: "{{ project }}-{{ deployment_group }}-job-q"
      default_visibility_timeout: 60
      message_retention_period: 1209600
      maximum_message_size: 4096
      delivery_delay: 0
      receive_message_wait_time: 0
    tags: sqs


  - name: Create Lambda IAM role 
    iam_role: 
      profile: "{{ aws_profile }}"
      region: "{{ aws_region }}"
      name: "{{ project }}-{{ deployment_group }}-lambda-id-role"
      description: Role for "{{ project }}-{{ deployment_group }}-lambda-id-role"
      assume_role_policy_document: "{{ lookup('file', 'iam-policy-lambda-assumed.json') }}"
    tags: 
      - lambda
    register: iam_role_lambda_receive

  - name: Update Lambda IAM role
    iam_policy:
      profile: "{{ aws_profile }}"
      iam_type: role
      iam_name: "{{ project }}-{{ deployment_group }}-lambda-id-role"
      policy_name: "{{ project }}-{{ deployment_group }}-lambda-id-policy"
      state: present
      policy_json: "{{ lookup('template', 'files/iam-policy-lambda-id.json.j2') }}"
    tags: 
      - lambda
      - lambdarole
   
  - name: Create Lambda IAM role 
    iam_role: 
      profile: "{{ aws_profile }}"
      region: "{{ aws_region }}"
      name: "{{ project }}-{{ deployment_group }}-lambda-job-role"
      description: Role for "{{ project }}-{{ deployment_group }}-lambda-job-role"
      assume_role_policy_document: "{{ lookup('file', 'iam-policy-lambda-assumed.json') }}"
    tags: 
      - lambda
    register: iam_role_lambda_receive
   
  - name: Update Lambda IAM role
    iam_policy:
      profile: "{{ aws_profile }}"
      iam_type: role
      iam_name: "{{ project }}-{{ deployment_group }}-lambda-job-role"
      policy_name: "{{ project }}-{{ deployment_group }}-lambda-job-policy"
      state: present
      policy_json: "{{ lookup('template', 'files/iam-policy-lambda-job.json.j2') }}"
    tags: 
      - lambda
      - lambdarole

  - name: Create id-L lambda bundle
    archive:
      path: "../src/lambda_services/api_service/"
      dest: "/tmp/{{ project }}-{{ deployment_group }}-id-L.zip"
      format: zip
    tags: 
      - bundle
      - archive
      - update
      
  - name: Create job-L lambda bundle
    archive:
      path: "../src/lambda_services/job_service/"
      dest: "/tmp/{{ project }}-{{ deployment_group }}-job-L.zip"
      format: zip
    tags: 
      - bundle
      - archive
      - update

  - name: Create job-L lambda function
    lambda:
      profile: "{{ aws_profile }}"
      region: "{{ aws_region }}"
      name: "{{ project }}-{{ deployment_group }}-job-L"
      state: present
      zip_file: "/tmp/{{ project }}-{{ deployment_group }}-job-L.zip"
      runtime: 'python3.6'
      role: "arn:aws:iam::{{ aws_account_id }}:role/{{ project }}-{{ deployment_group }}-lambda-job-role"
      handler: "job_service.interpret_job_submission"
      memory_size: 512
      timeout: 360 
      environment_variables: 
        JOB_QUEUE_NAME: "{{ project }}-{{ deployment_group }}-job-q"
        OUTPUT_BUCKET: "{{ project }}-{{ deployment_group }}-output"
        FARGATE_CLUSTER: "{{ project }}-{{ deployment_group }}-cluster"
        FARGATE_SERVICE: "{{ project }}-{{ deployment_group }}-service"
      tags:
        Deployment: "{{ deployment_group }}"
    tags: 
      - lambda2
      - lambda
      - update
     
  - name: Create id-L lambda function
    lambda:
      profile: "{{ aws_profile }}"
      region: "{{ aws_region }}"
      name: "{{ project }}-{{ deployment_group }}-id-L"
      state: present
      zip_file: "/tmp/{{ project }}-{{ deployment_group }}-id-L.zip"
      runtime: 'python3.6'
      role: "arn:aws:iam::{{ aws_account_id }}:role/{{ project }}-{{ deployment_group }}-lambda-id-role"
      handler: "api_service.generate_id_and_tokens"
      memory_size: 512
      timeout: 360 
      environment_variables: 
        INPUT_BUCKET: "{{ project }}-{{ deployment_group }}-input"
      tags:
        Deployment: "{{ deployment_group }}"
    tags: 
      - lambda2
      - lambda
      - update


  #- name: Create SNS put topic
    #sns_topic:
    #  profile: "{{ aws_profile }}"
    #  region: "{{ aws_region }}"
    #  name: "{{ project }}-{{ deployment_group }}-s3put"
    #  state: present
    #  display_name: "{{ project }}-{{ deployment_group }}-s3put"
    #  policy: "{{ lookup('template', 'files/sns_s3put.json.j2') }}"
    #  delivery_policy:
    #    http:
    #      defaultHealthyRetryPolicy:
    #          minDelayTarget: 20
    #          maxDelayTarget: 20
    #          numRetries: 3
    #          numMaxDelayRetries: 0
    #          backoffFunction: "linear"
    #      disableSubscriptionOverrides: False
    #      defaultThrottlePolicy:
    #          maxReceivesPerSecond: 10
    #  subscriptions:
    #    - endpoint: "arn:aws:lambda:{{ aws_region }}:{{ aws_account_id }}:function:{{ project }}-{{ deployment_group }}-job-L"
    #      protocol: "lambda"
    #tags: 
    #  - sns
    #  - policy


  #- name: Create s3 bucket notification
    # Ansible 2.9 - October release
    #s3_bucket_notification:
      #profile: "{{ aws_profile }}"
      #region: "{{ aws_region }}"
      #state: present
      #event_name: "{{ project }}-{{ deployment_group }}-put"
      #bucket_name: "{{ project }}-{{ deployment_group }}-input"
      #function_name: "arn:aws:sns:{{ aws_region }}:{{ aws_account_id }}:{{ project }}-{{ deployment_group }}-s3put"
      #events: ["s3:ObjectCreated:Put", "s3:ObjectCreated:CompleteMultipartUpload"]
      ##prefix: images/
      ##suffix: .jpg
    #command: >
    #  aws s3api put-bucket-notification-configuration --profile "{{ aws_profile }}" 
    #  --region "{{ aws_region }}" --bucket "{{ project }}-{{ deployment_group }}-input" 
    #  --cli-input-json '{{ lookup('template', 'files/s3-notification.json.j2') }}'
    #tags: s3notif


  - name: Cluster creation
    community.aws.ecs_cluster:
            name: "{{ project }}-{{ deployment_group }}-cluster"
            state: present

  - name: Create task definition
    community.aws.ecs_taskdefinition:
      family: "{{ project }}-{{ deployment_group }}-apbs"
      containers:
      - name: "apbs"
        essential: true
        image: "{{ aws_account_id }}.dkr.ecr.{{ aws_region }}.amazonaws.com/apbs:{{ deployment_group }}"
        environment:
          - name: "JOBQ"
            value: "{{ project }}-{{ deployment_group }}-job-q"
          - name: "OUTPUT_BUCKET"
            value: "{{ project }}-{{ deployment_group }}-output"
      launch_type: FARGATE
      task_role_arn: "arn:aws:iam::{{ aws_account_id }}:role/{{ project }}-{{ deployment_group }}-apbs-role"
      execution_role_arn: "arn:aws:iam::{{ aws_account_id }}:role/{{ project }}-{{ deployment_group }}-fargate-role"
      cpu: 512
      memory: 1GB
      state: present
      network_mode: awsvpc

  - name: create ECS service on VPC network
    community.aws.ecs_service:
            state: present
            name: "{{ project }}-{{ deployment_group }}-service"
            cluster: "{{ project }}-{{ deployment_group }}-cluster"
            launch_type: FARGATE
            task_definition: '{{ project }}-{{ deployment_group }}-apbs:1'
            network_configuration:
                    subnets:
                      - '{{ vpc_subnet_id2 }}'
                    assign_public_ip: yes
                    security_groups:
                      - '{{ default_sg }}'
            desired_count: 0
            
  - name: Create an alarm scale up fargate tasks
    community.aws.ec2_metric_alarm:
      state: present
      region: "{{ aws_region }}"
      name: "{{ project }}-{{ deployment_group }}-q-up"
      metric: "ApproximateNumberOfMessagesVisible"
      namespace: "AWS/SQS"
      treat_missing_data: "ignore"
      statistic: "Average"
      comparison: ">="
      threshold: 1.0
      period: 60
      evaluation_periods: 1
      unit: "Count"
      description: ""{{ aws_region }}" job-q check"
      dimensions: {"QueueName":'{{ project }}-{{ deployment_group }}-job-q'}
      alarm_actions: []
      
  - name: Create an alarm scale up fargate tasks
     community.aws.ec2_metric_alarm:
       state: present
       region: "{{ aws_region }}"
       name: "{{ project }}-{{ deployment_group }}-q-down"
       metric: "ApproximateNumberOfMessagesVisible"
       namespace: "AWS/SQS"
       treat_missing_data: "ignore"
       statistic: "Maximum"
       comparison: "<"
       threshold: 0.1
       period: 60
       evaluation_periods: 3
       unit: "Count"
       description: ""{{ aws_region }}" job-q check"
       dimensions: {"QueueName":'{{ project }}-{{ deployment_group }}-job-q'}
       alarm_actions: []

