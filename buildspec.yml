version: 0.2

phases:
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)
  build:
    commands:
      - echo Build started on `date`
      - IMAGE_TAG=test
      - branch=`echo $CODEBUILD_INITIATOR | awk -F'-' '{ print $NF }'`  
      - if [ "$branch" ]; then IMAGE_TAG=$branch; fi
      - dockerchange=$(find src/docker -newermt "@$(aws ecr describe-images --region $AWS_DEFAULT_REGION --repository-name $IMAGE_REPO_NAME --image-ids imageTag=$IMAGE_TAG | jq -r '.imageDetails[0].imagePushedAt')" | wc -l)
      - if [ "$dockerchange" ]; then echo Building the Docker image... ; fi
      - docker build -t $IMAGE_REPO_NAME:main.base src/docker
      - docker tag $IMAGE_REPO_NAME:main.base    $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
      - cd $CODEBUILD_SRC_DIR/src/lambda_services/job_service; zip -r /tmp/job.zip .
      - cd $CODEBUILD_SRC_DIR/src/lambda_services/api_service; zip -r /tmp/id.zip .
      - aws lambda update-function-code --function-name apbs-$IMAGE_TAG-job-L --publish --zip-file /tmp/job.zip
      - aws lambda update-function-code --function-name apbs-$IMAGE_TAG-id-L  --publish --zip-file /tmp/id.zip
  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker image...
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
